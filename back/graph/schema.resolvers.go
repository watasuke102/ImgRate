package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"main/db"
	"main/graph/model"
)

// CreateUser is the resolver for the create_user field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (bool, error) {
	if err := db.AddUser(r.DB, input.UserName); err != nil {
		return false, err
	}
	return true, nil
}

// UpdateUser is the resolver for the update_user field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UserUpdate) (bool, error) {
	favorites := ""
	if input.Favorites != nil {
		favorites = *input.Favorites
	}

	if err := db.UpdateUser(r.DB, input.UserName, favorites); err != nil {
		return false, err
	}
	return true, nil
}

// CreateComment is the resolver for the create_comment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (bool, error) {
	if err := db.AddComment(r.DB, input.CommentTo, input.UserName, input.Comment); err != nil {
		return false, err
	}
	return true, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, name *string) ([]*model.User, error) {
	users, err := db.GetUsers(r.DB, name)
	if err != nil {
		return nil, err
	}
	return users, err
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, name *string) ([]*model.Comment, error) {
	comments, err := db.GetComments(r.DB, name)
	if err != nil {
		return nil, err
	}
	return comments, err
}

// Images is the resolver for the images field.
func (r *queryResolver) Images(ctx context.Context) ([]*model.Image, error) {
	images, err := db.GetImages(r.DB)
	if err != nil {
		return nil, err
	}
	return images, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
